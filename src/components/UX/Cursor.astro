---
export interface Props {
  overlayIndex: number;
  size: string;
  count: number;
}

const { overlayIndex, size, count }: Props = Astro.props;
---

<script>
  import addCustomCursorSupport from "@dom/CursorSupport";

  type HTMLPosition = { x: number; y: number };
  type CirclePosition = { html: HTMLDivElement; pos: HTMLPosition };
  function display() {
    const element = document.getElementById("c-cursor");
    if (element) {
      element.style.display = "block";
      element.style.opacity = "1";
    }
  }
  function listen() {
    const elements = Array.from(
      document.getElementsByClassName("c-cursor-circle")
    );
    const circles: CirclePosition[] = elements.map(html => ({
      html: html as HTMLDivElement,
      pos: {
        x: 0,
        y: 0,
      },
    }));
    const move = (
      circle: CirclePosition,
      offset: number,
      scale: number,
      pos: HTMLPosition
    ) => {
      circle.html.style.left = pos.x - offset + "px";
      circle.html.style.top = pos.y - offset + "px";
      circle.html.style.scale = `${scale}`;
      circle.pos.x = pos.x;
      circle.pos.y = pos.y;
    };
    const settings = {
      reshow: true,
      visible: true,
    };
    const animate = (
      circles: CirclePosition[],
      offset: number,
      cursor: () => HTMLPosition
    ) => {
      if (!settings.visible) {
        return;
      }
      let x = cursor().x,
        y = cursor().y;
      for (let i = 0; i < circles.length; i++) {
        move(circles[i], offset, (circles.length - i) / circles.length, {
          x,
          y,
        });
        const nextCircle = circles[i + 1] || circles[0];
        x += (nextCircle.pos.x - x) * 0.3;
        y += (nextCircle.pos.y - y) * 0.3;
      }
      requestAnimationFrame(() => animate(circles, offset, cursor));
    };
    const cursor: HTMLPosition = { x: 0, y: 0 };
    const hide = () => {
      const element = document.getElementById("c-cursor");
      if (element) {
        element.style.opacity = "0";
      }
      settings.reshow = true;
    };
    const onMove = e => {
      cursor.x = e.clientX;
      cursor.y = e.clientY;
      if (settings.reshow) {
        setTimeout(display, 80);
        settings.reshow = false;
      }
    };
    const onOut = e => {
      if (e.relatedTarget === null) {
        hide();
      }
    };
    const enable = () => {
      window.addEventListener("mousemove", onMove);
      window.addEventListener("mouseout", onOut);
      document.documentElement.style.setProperty("--cursor-mode", "none");
      settings.visible = true;
      animate(circles, 12, () => cursor);
    };
    const disable = () => {
      window.removeEventListener("mousemove", onMove);
      window.removeEventListener("mouseout", onOut);
      document.documentElement.style.setProperty("--cursor-mode", "auto");
      settings.reshow = true;
      settings.visible = false;
      hide();
    };
    window.addEventListener("custom_cursor_disable", () => disable());
    window.addEventListener("custom_cursor_enable", () => enable());
    const enabled = localStorage.getItem("custom_cursor_enable");
    if (enabled == null || enabled === "true") {
      enable();
    }
  }
  addCustomCursorSupport("a, input, button, .theme-switcher");
  if (window.innerWidth > 700) {
    listen();
  }
</script>

<div id="c-cursor">
  {
    Array.from({ length: count }, (_, i) => i).map(_ => (
      <div class="c-cursor-circle" />
    ))
  }
</div>

<style define:vars={{ overlayIndex, cursorSize: size }}>
  :global(:root) {
    --cursor-color: var(--accent-color);
    --cursor-mode: auto;
  }
  #c-cursor {
    display: none;
    position: absolute;
    opacity: 0;
    animation: opacity-fade 1s ease-in-out;
    transition: opacity 1s ease-in-out;
    mix-blend-mode: difference;
    pointer-events: none;
    z-index: var(--overlayIndex);
  }
  #c-cursor div {
    height: var(--cursorSize);
    width: var(--cursorSize);
    border-radius: var(--cursorSize);
    background-color: var(--cursor-color);
    transition: background-color 0.5s ease-in-out;
    pointer-events: none;
    position: fixed;
    top: 0;
    left: 0;
  }
  :global(html, a, input, button, .theme-switcher) {
    cursor: var(--cursor-mode);
  }
</style>
